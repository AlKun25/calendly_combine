Calendar Integrator Demo MVP Implementation Plan
Overview
This plan outlines the development of a minimal, demo-ready Calendar Integrator frontend MVP. The application allows users to sign in with Google, input calendar links (Calendly/Google), view overlapping availability, and create a calendar event. The focus is on delivering a simple, reliable, and polished demo within 2-3 weeks, using Next.js 15, React 19, Tailwind CSS, and Clerk for authentication.
Goals for Demo

Simple Flow: Guide users through a 3-step wizard (Calendar Links, Availability, Event Creation) for a clear, intuitive experience.
Polished UI: Use a clean, Notion-like design to impress stakeholders.
Reliable Functionality: Ensure robust authentication, API integration, and error handling to avoid demo failures.
Accessibility: Include basic accessibility to make the demo inclusive.
Minimal Scope: Focus on core features, deferring non-essential functionality (e.g., view toggles, animations).

Technology Stack

Framework: Next.js 15 (App Router)
UI Library: React 19 with Server Components
Styling: Tailwind CSS
Component Library: Shadcn/UI (Button, Card, Form, Input, Toast)
Authentication: Clerk with Google OAuth
Form Handling: React Hook Form
Date Handling: date-fns
API Client: Fetch API
Testing: Jest for unit tests, manual E2E testing
Local Storage: For minimal state persistence

Project Structure
A streamlined structure for quick iteration and maintainability, following Next.js App Router conventions:
src/
├── app/
│   ├── (auth)/
│   │   ├── sign-in/                    # Clerk sign-in page
│   │   │   └── page.tsx
│   │   └── layout.tsx                  # Auth layout
│   ├── wizard/
│   │   ├── layout.tsx                  # Wizard layout with stepper
│   │   ├── step-1/                     # Step 1: Calendar links
│   │   │   └── page.tsx
│   │   ├── step-2/                     # Step 2: Availability
│   │   │   └── page.tsx
│   │   ├── step-3/                     # Step 3: Event creation
│   │   │   └── page.tsx
│   │   └── actions.ts                  # Server actions for API calls
│   ├── layout.tsx                      # Root layout with Clerk provider
│   ├── page.tsx                        # Landing page
│   └── globals.css                     # Tailwind styles
├── components/
│   ├── ui/                             # Shadcn/UI components
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── form.tsx
│   │   ├── input.tsx
│   │   └── toast.tsx
│   ├── wizard/
│   │   ├── stepper.tsx                 # Wizard progress indicator
│   │   ├── wizard-buttons.tsx          # Next/Prev buttons
│   │   ├── calendar-form.tsx           # Step 1 form
│   │   ├── availability-list.tsx       # Step 2 availability display
│   │   ├── event-form.tsx              # Step 3 event form
│   │   └── success-message.tsx         # Step 3 success confirmation
├── lib/
│   ├── api/
│   │   ├── calendar.ts                 # API client functions
│   │   └── clerk.ts                    # Clerk token utilities
│   ├── utils/
│   │   ├── date.ts                     # Date formatting
│   │   ├── storage.ts                  # LocalStorage helpers
│   │   └── validation.ts               # Form validation
│   └── types/
│       ├── calendar.ts                 # Calendar-related types
│       └── event.ts                    # Event-related types
├── tests/
│   ├── components/                     # Unit tests for components
│   └── utils/                          # Unit tests for utilities
├── middleware.ts                       # Clerk middleware
└── next.config.mjs                     # Next.js configuration

Design System
A minimal, Notion-like design for a professional demo UI:

Aesthetic: Clean, black-and-white style
Typography:
Font: Inter (via Google Fonts) or system sans-serif
Sizes: 14px (body), 16px (labels), 20px (headings)
Line Height: 1.5


Color Palette:
Primary Text: #000000
Secondary Text: #6B7280
Background: #FFFFFF
Accent: #2563EB (buttons, links)
Error: #EF4444
Success: #10B981


Spacing: Tailwind scale (e.g., 4px, 8px, 16px)
Components:
Buttons: Primary (solid blue), Secondary (outline)
Forms: Clean inputs with focus states, inline errors
Cards: Subtle borders, 16px padding


Accessibility:
ARIA labels for forms and buttons
Keyboard navigation (tab order, Enter key support)
High-contrast text and focus indicators



Implementation Approach
1. Authentication
Purpose: Allow users to sign in with Google and access calendar data.

Implementation:
Use Clerk’s SignIn component for Google OAuth.
Configure scopes: calendar.readonly, calendar.events.
Protect wizard routes with Clerk middleware.
Create a server-side utility to retrieve Google OAuth tokens.


Files:
app/(auth)/sign-in/page.tsx: Sign-in page
middleware.ts: Route protection
lib/api/clerk.ts: Token retrieval


Demo Considerations:
Show a clear “Sign in with Google” button.
Handle auth errors with a friendly message (e.g., “Please grant calendar access”).



2. Landing Page
Purpose: Introduce the app and guide users to sign in.

Implementation:
Simple centered layout with app name, tagline, and “Get Started” button.
Use Next.js server component for fast rendering.
Redirect authenticated users to /wizard/step-1.


Files:
app/page.tsx: Landing page


Demo Considerations:
Keep minimal and professional to set a positive first impression.



3. Wizard Framework
Purpose: Guide users through a 3-step process (Links, Availability, Event Creation).

Implementation:
Use a layout with a simple stepper showing progress (Step 1/3, 2/3, 3/3).
Store wizard state in URL (/wizard/step-1, /step-2, /step-3).
Use localStorage for form data persistence.
Implement Next/Prev buttons with disabled states for incomplete steps.


Files:
app/wizard/layout.tsx: Stepper and container
components/wizard/stepper.tsx: Progress indicator
components/wizard/wizard-buttons.tsx: Navigation
lib/utils/storage.ts: LocalStorage helpers


Demo Considerations:
Clear stepper visuals to show progress.
Smooth navigation to keep the demo engaging.



4. Step 1: Calendar Link Form
Purpose: Collect and validate calendar links.

Implementation:
Form with dynamic inputs for links (min. 2), meeting duration (numeric, minutes).
Use React Hook Form for validation (regex for Calendly/Google links).
Auto-detect link type without a dropdown.
Submit via server action to backend API.
Persist form data in localStorage.


Files:
app/wizard/step-1/page.tsx: Form page
components/wizard/calendar-form.tsx: Form component
app/wizard/actions.ts: Server action
lib/utils/validation.ts: Link regex


Demo Considerations:
Show inline errors (e.g., “Invalid link”) for smooth recovery.
Use a loading spinner during submission.



5. Step 2: Availability Display
Purpose: Show overlapping time slots.

Implementation:
Display slots in a list view (date, start time, end time, duration).
Convert times to user’s local timezone using date-fns.
Allow slot selection via radio buttons.
Enable “Next” button only when a slot is selected.
Fetch slots via server action from backend API.


Files:
app/wizard/step-2/page.tsx: Availability page
components/wizard/availability-list.tsx: List component
app/wizard/actions.ts: Server action
lib/utils/date.ts: Timezone formatting


Demo Considerations:
Clean, readable list to showcase functionality.
Highlight selected slot clearly.



6. Step 3: Event Creation & Success
Purpose: Create an event and confirm success.

Implementation:
Form with fields: title (required), description (optional), location (optional).
Display selected slot with no edit option for simplicity.
Show participants (from API) with checkboxes (all checked by default).
Submit via server action to create event.
Show success message with event details and “View in Calendar” link.
Allow restarting the flow with a “Create Another” button.


Files:
app/wizard/step-3/page.tsx: Event form and success page
components/wizard/event-form.tsx: Form component
components/wizard/success-message.tsx: Success UI
app/wizard/actions.ts: Server action
lib/types/event.ts: Event types


Demo Considerations:
Clear success message to end the demo on a high note.
Ensure the “View in Calendar” link works reliably.



7. API Integration
Purpose: Connect to backend for slot finding and event creation.

Implementation:
Use server actions for secure API calls.
Pass Google OAuth token (from Clerk) in Authorization header.
Handle API errors with user-friendly messages via Shadcn/UI Toast.


Files:
app/wizard/actions.ts: Server actions (findOverlappingSlots, createEvent)
lib/api/calendar.ts: API client utilities


Example Server Action:'use server';
import { auth, clerkClient } from '@clerk/nextjs/server';

export async function findOverlappingSlots(formData: FormData) {
  const links = formData.get('links') as string;
  const duration = formData.get('duration') as string;

  const { userId } = await auth();
  if (!userId) throw new Error('Unauthorized');

  const tokens = await clerkClient.users.getUserOauthAccessToken(userId, 'oauth_google');
  const token = tokens.data[0]?.token;

  const response = await fetch(`${process.env.BACKEND_API_URL}/api/calendar/process`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    },
    body: JSON.stringify({
      links: JSON.parse(links),
      meeting_duration_minutes: parseInt(duration),
    }),
  });

  if (!response.ok) throw new Error('Failed to find slots');
  return response.json();
}



Responsive Design

Mobile (<640px): Stack elements vertically, full-width inputs, larger touch targets.
Desktop (>640px): Centered content, max-width 800px, side-by-side form fields where appropriate.
Implementation: Use Tailwind’s responsive utilities (e.g., sm:, md:) for mobile-first design.

Accessibility

Keyboard Navigation: Ensure forms and buttons are focusable via Tab and actionable via Enter/Space.
ARIA Labels: Add aria-label to inputs and buttons (e.g., “Add calendar link”).
Contrast: Use high-contrast colors (e.g., #000000 on #FFFFFF).
Testing: Manually test with keyboard and screen reader (e.g., VoiceOver).

Error Handling

Form Validation: Inline errors for invalid inputs (e.g., “Please enter a valid link”).
API Errors: Show toast notifications (e.g., “Failed to fetch slots, please try again”).
Auth Errors: Redirect to sign-in with a message if unauthorized.
Implementation: Use try/catch in server actions and Shadcn/UI Toast for feedback.

Local Storage

Purpose: Persist calendar links and selected slot to avoid data loss during demo.
Data Stored:interface Storage {
  calendarLinks: { links: string[]; duration: number };
  selectedSlot?: { start: string; end: string };
}


Implementation: Use helper functions in lib/utils/storage.ts to read/write JSON.
Security: Avoid storing sensitive data (e.g., tokens); clear storage on sign-out.

Performance Optimizations

Server Components: Use Next.js server components for landing and wizard pages to reduce client-side JS.
Code Splitting: Leverage Next.js dynamic imports for large components (e.g., forms).
Minimal Dependencies: Use only essential libraries to keep bundle size small.
Asset Optimization: Use inline SVGs for icons, system fonts as fallback.

Testing Strategy

Unit Tests (Jest):
Test form validation (lib/utils/validation.ts).
Test date formatting (lib/utils/date.ts).
Test key components (calendar-form.tsx, availability-list.tsx).
Goal: 80% coverage for critical logic.


Manual E2E Testing:
Test full flow: sign-in → link input → slot selection → event creation.
Test error cases: invalid links, API failures, sign-in issues.


Files:
tests/components/*.test.tsx
tests/utils/*.test.ts


Deployment

Platform: Vercel (Next.js-friendly, Clerk integration).
Environment Variables:
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
CLERK_SECRET_KEY
BACKEND_API_URL


Build Optimization: Use Next.js output: export for static builds if serverless isn’t needed.
Error Monitoring: Log errors to console for demo debugging (add Sentry later).

Implementation Timeline
Week 1: Setup & Authentication

Set up Next.js project, Tailwind, Shadcn/UI, Clerk.
Implement authentication and landing page.
Create wizard layout and stepper.

Week 2: Core Flow

Build Step 1 (calendar link form) with validation and localStorage.
Build Step 2 (availability list) with slot selection.
Connect to backend API via server actions.

Week 3: Event Creation & Polish

Build Step 3 (event form, success message).
Add error handling, loading states, and toast notifications.
Test full flow, refine UI, ensure accessibility.

Dependencies
{
  "dependencies": {
    "@clerk/nextjs": "^5.0.0",
    "@hookform/resolvers": "^3.3.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "date-fns": "^3.0.0",
    "lucide-react": "^0.263.1",
    "next": "15.0.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.53.0",
    "tailwind-merge": "^2.2.1"
  },
  "devDependencies": {
    "@testing-library/react": "^15.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0"
  }
}

Conclusion
This plan delivers a demo-ready Calendar Integrator MVP that is simple, reliable, and polished. By focusing on a 3-step wizard, minimal design, and robust error handling, the app will showcase core functionality effectively. Standard Next.js practices (App Router, server components, Vercel deployment) ensure a modern, performant application. Accessibility, testing, and security measures make the demo inclusive and stable, ready to impress stakeholders in 2-3 weeks.
